<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Leaderboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&display=swap');
       
        body {
            font-family: 'Orbitron', monospace;
            background: #0a0a0a;
            min-height: 100vh;
            position: relative;
            overflow-x: hidden;
        }
       
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background:
                radial-gradient(circle at 20% 30%, rgba(255, 0, 64, 0.2) 0%, transparent 60%),
                radial-gradient(circle at 80% 70%, rgba(0, 128, 255, 0.2) 0%, transparent 60%),
                radial-gradient(circle at 50% 50%, rgba(0, 255, 255, 0.1) 0%, transparent 70%),
                linear-gradient(45deg, rgba(255, 0, 64, 0.03) 1px, transparent 1px),
                linear-gradient(-45deg, rgba(0, 128, 255, 0.03) 1px, transparent 1px),
                linear-gradient(rgba(0, 255, 255, 0.02) 1px, transparent 1px),
                linear-gradient(90deg, rgba(255, 255, 255, 0.01) 1px, transparent 1px);
            background-size: 100% 100%, 100% 100%, 100% 100%, 30px 30px, 30px 30px, 60px 60px, 60px 60px;
            pointer-events: none;
            animation: gridMove 30s linear infinite, colorShift 6s ease-in-out infinite, hologramFlicker 10s ease-in-out infinite;
        }
       
        .floating-particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 0;
        }
       
        .hologram-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 2;
            background:
                repeating-linear-gradient(
                    0deg,
                    transparent,
                    transparent 2px,
                    rgba(0, 255, 255, 0.03) 2px,
                    rgba(0, 255, 255, 0.03) 4px
                );
            animation: scanlines 1s linear infinite;
        }
       
        .data-streams {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }
       
        .data-stream {
            position: absolute;
            width: 2px;
            height: 100px;
            background: linear-gradient(to bottom, transparent, #00ffff, transparent);
            opacity: 0.6;
            animation: dataFlow 3s linear infinite;
        }
       
        .lightning-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }
       
        .lightning {
            position: absolute;
            width: 3px;
            background: linear-gradient(to bottom, transparent, #fff, transparent);
            opacity: 0;
            animation: lightning 0.3s ease-in-out;
        }
       
        .lightning.red {
            background: linear-gradient(to bottom, transparent, #ff0040, #fff, #ff0040, transparent);
            box-shadow: 0 0 20px #ff0040, 0 0 40px #ff0040;
        }
       
        .lightning.blue {
            background: linear-gradient(to bottom, transparent, #0080ff, #fff, #0080ff, transparent);
            box-shadow: 0 0 20px #0080ff, 0 0 40px #0080ff;
        }
       
        .particle {
            position: absolute;
            width: 6px;
            height: 6px;
            background: #ff0040;
            border-radius: 50%;
            box-shadow: 0 0 15px #ff0040, 0 0 30px #ff0040;
            animation: float 8s linear infinite, particleGlow 2s ease-in-out infinite alternate;
        }
       
        .particle:nth-child(2n) {
            background: #0080ff;
            box-shadow: 0 0 15px #0080ff, 0 0 30px #0080ff;
            animation-duration: 12s, 2s;
            width: 8px;
            height: 8px;
        }
       
        .particle:nth-child(3n) {
            background: #ff0040;
            box-shadow: 0 0 20px #ff0040, 0 0 40px #ff0040;
            animation-duration: 10s, 2s;
            width: 5px;
            height: 5px;
        }
       
        .particle:nth-child(4n) {
            background: #0080ff;
            box-shadow: 0 0 25px #0080ff, 0 0 50px #0080ff;
            animation-duration: 14s, 2s;
            width: 7px;
            height: 7px;
        }
       
        .tournament-board {
            background:
                linear-gradient(145deg, rgba(5, 5, 15, 0.98), rgba(10, 10, 25, 0.95)),
                radial-gradient(circle at 25% 25%, rgba(255, 0, 64, 0.15) 0%, transparent 60%),
                radial-gradient(circle at 75% 75%, rgba(0, 128, 255, 0.15) 0%, transparent 60%),
                radial-gradient(circle at 50% 10%, rgba(0, 255, 255, 0.08) 0%, transparent 40%);
            border-radius: 25px;
            padding: 20px;
            position: relative;
            overflow: hidden;
            backdrop-filter: blur(20px) saturate(1.5);
            border: 3px solid transparent;
            background-clip: padding-box;
            box-shadow:
                0 0 60px rgba(255, 0, 64, 0.4),
                0 0 60px rgba(0, 128, 255, 0.4),
                0 0 100px rgba(0, 255, 255, 0.2),
                inset 0 0 40px rgba(255, 0, 64, 0.08),
                inset 0 0 40px rgba(0, 128, 255, 0.08),
                inset 0 0 60px rgba(0, 255, 255, 0.05);
            transform-style: preserve-3d;
            animation: boardFloat 6s ease-in-out infinite;
        }
       
        .tournament-board::before {
            content: '';
            position: absolute;
            top: -3px;
            left: -3px;
            right: -3px;
            bottom: -3px;
            border-radius: 28px;
            padding: 3px;
            background:
                linear-gradient(45deg, #ff0040, #0080ff, #00ffff, #ff6600, #ff0040),
                linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            background-size: 400% 400%, 200% 100%;
            mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
            mask-composite: exclude;
            animation:
                borderFlow 1.5s ease-in-out infinite,
                borderPulse 0.8s ease-in-out infinite alternate,
                holoBorder 3s linear infinite;
        }
       
        .tournament-board::after {
            content: '';
            position: absolute;
            top: -5px;
            left: -5px;
            right: -5px;
            bottom: -5px;
            border-radius: 30px;
            background: linear-gradient(45deg, transparent, rgba(0, 255, 255, 0.2), transparent);
            animation: outerGlow 3s ease-in-out infinite;
            z-index: -1;
        }
       
        .player-section {
            position: relative;
            padding: 12px;
        }
       
        .player-name {
            font-size: 1.5rem;
            font-weight: 900;
            text-align: center;
            margin-bottom: 16px;
            text-transform: uppercase;
            letter-spacing: 2px;
            position: relative;
        }
       
        .red-player {
            color: #ff0040;
            text-shadow:
                0 0 10px #ff0040,
                0 0 20px #ff0040,
                0 0 30px #ff0040;
            animation: redPulse 2s ease-in-out infinite alternate;
        }
       
        .blue-player {
            color: #0080ff;
            text-shadow:
                0 0 10px #0080ff,
                0 0 20px #0080ff,
                0 0 30px #0080ff;
            animation: bluePulse 2s ease-in-out infinite alternate;
        }
       
        .vs-divider {
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            font-size: 1.2rem;
            font-weight: 900;
            color: #00ffff;
            text-shadow:
                0 0 10px #00ffff,
                0 0 20px #00ffff;
            animation: vsPulse 1.5s ease-in-out infinite;
            z-index: 10;
            background: rgba(10, 10, 20, 0.9);
            padding: 6px 12px;
            border-radius: 10px;
            border: 1px solid #00ffff;
        }
       
        .score-container {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
       
        .score-box {
            background: rgba(0, 0, 0, 0.7);
            border-radius: 12px;
            padding: 12px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            cursor: pointer;
        }
       
        .score-box:hover {
            transform: translateY(-3px) scale(1.05);
            background: rgba(0, 0, 0, 0.9);
        }
       
        .red-score {
            border-color: rgba(255, 0, 64, 0.3);
            box-shadow: 0 0 15px rgba(255, 0, 64, 0.2);
            animation: redBoxPulse 3s ease-in-out infinite;
        }
       
        .red-score:hover {
            box-shadow: 0 0 25px rgba(255, 0, 64, 0.5), inset 0 0 20px rgba(255, 0, 64, 0.1);
            border-color: rgba(255, 0, 64, 0.6);
        }
       
        .blue-score {
            border-color: rgba(0, 128, 255, 0.3);
            box-shadow: 0 0 15px rgba(0, 128, 255, 0.2);
            animation: blueBoxPulse 3s ease-in-out infinite;
        }
       
        .blue-score:hover {
            box-shadow: 0 0 25px rgba(0, 128, 255, 0.5), inset 0 0 20px rgba(0, 128, 255, 0.1);
            border-color: rgba(0, 128, 255, 0.6);
        }
       
        .score-box::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 2px;
            background: linear-gradient(90deg, transparent, var(--scan-color), transparent);
            animation: scanLine 3s linear infinite;
        }
       
        .red-score {
            --scan-color: #ff0040;
        }
       
        .blue-score {
            --scan-color: #0080ff;
        }
       
        .score-number {
            font-size: 1.8rem;
            font-weight: 900;
            text-align: center;
            margin-bottom: 8px;
            color: #ffffff;
            text-shadow: 0 0 15px currentColor;
            transition: all 0.3s ease;
        }
       
        .cyber-btn {
            width: 100%;
            padding: 8px;
            border: none;
            border-radius: 8px;
            font-family: 'Orbitron', monospace;
            font-weight: 700;
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
       
        .win-btn {
            background: linear-gradient(135deg, #00ff88, #00cc66);
            color: #000;
            border: 1px solid #00ff88;
            box-shadow: 0 0 10px rgba(0, 255, 136, 0.3);
        }
       
        .win-btn:hover {
            background: linear-gradient(135deg, #00ffaa, #00ff88);
            box-shadow: 0 0 20px rgba(0, 255, 136, 0.6);
            transform: translateY(-2px);
        }
       
        .lose-btn {
            background: linear-gradient(135deg, #ff4040, #ff0000);
            color: #fff;
            border: 1px solid #ff4040;
            box-shadow: 0 0 10px rgba(255, 64, 64, 0.3);
        }
       
        .lose-btn:hover {
            background: linear-gradient(135deg, #ff6060, #ff4040);
            box-shadow: 0 0 20px rgba(255, 64, 64, 0.6);
            transform: translateY(-2px);
        }
       
        .reset-btn {
    background: #000000; /* fond noir */
    color: #ffffff;      /* texte blanc */
    border: 1px solid #ffffff; /* bordure blanche */
    font-size: 1rem;
    padding: 14px 28px;
    box-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
    margin-top: 24px;
}
       
        .reset-btn:hover {
            background: linear-gradient(135deg, #888, #bbb);
            box-shadow: 0 0 20px rgba(136, 136, 136, 0.6);
            transform: translateY(-2px);
        }
       
        .title {
            font-size: 1.8rem;
            font-weight: 900;
            text-align: center;
            margin-bottom: 20px;
            background: linear-gradient(45deg, #ff0040, #0080ff, #00ffff, #ff6600, #ff0040);
            background-size: 300% 300%;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: titleFlow 2s ease-in-out infinite, titleGlow 4s ease-in-out infinite;
            text-transform: uppercase;
            letter-spacing: 3px;
            position: relative;
            transform-style: preserve-3d;
            filter: drop-shadow(0 0 20px rgba(0, 255, 255, 0.5));
        }
       
        .title::before {
            content: 'TOURNAMENT LEADERBOARD';
            position: absolute;
            top: 2px;
            left: 2px;
            background: linear-gradient(45deg, rgba(255, 0, 64, 0.3), rgba(0, 128, 255, 0.3));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            z-index: -1;
            animation: titleShadow 3s ease-in-out infinite;
        }
       
        @keyframes borderFlow {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }
       
        @keyframes borderPulse {
            0% { opacity: 0.7; }
            100% { opacity: 1; }
        }
       
        @keyframes outerGlow {
            0%, 100% {
                opacity: 0.3;
                transform: scale(1);
            }
            50% {
                opacity: 0.7;
                transform: scale(1.02);
            }
        }
       
        @keyframes redPulse {
            from { text-shadow: 0 0 10px #ff0040, 0 0 20px #ff0040, 0 0 30px #ff0040; }
            to { text-shadow: 0 0 20px #ff0040, 0 0 30px #ff0040, 0 0 40px #ff0040; }
        }
       
        @keyframes bluePulse {
            from { text-shadow: 0 0 10px #0080ff, 0 0 20px #0080ff, 0 0 30px #0080ff; }
            to { text-shadow: 0 0 20px #0080ff, 0 0 30px #0080ff, 0 0 40px #0080ff; }
        }
       
        @keyframes redBoxPulse {
            0%, 100% { box-shadow: 0 0 15px rgba(255, 0, 64, 0.2); }
            50% { box-shadow: 0 0 25px rgba(255, 0, 64, 0.4); }
        }
       
        @keyframes blueBoxPulse {
            0%, 100% { box-shadow: 0 0 15px rgba(0, 128, 255, 0.2); }
            50% { box-shadow: 0 0 25px rgba(0, 128, 255, 0.4); }
        }
       
        @keyframes vsPulse {
            0%, 100% {
                text-shadow: 0 0 15px #00ffff, 0 0 30px #00ffff;
                transform: translate(-50%, -50%) scale(1) rotate(0deg);
            }
            50% {
                text-shadow: 0 0 25px #00ffff, 0 0 40px #00ffff, 0 0 50px #00ffff;
                transform: translate(-50%, -50%) scale(1.15) rotate(2deg);
            }
        }
       
        @keyframes titleFlow {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }
       
        @keyframes scanLine {
            0% { left: -100%; }
            100% { left: 100%; }
        }
       
        @keyframes float {
            0% {
                transform: translateY(100vh) translateX(0px) rotate(0deg);
                opacity: 0;
            }
            10% {
                opacity: 1;
            }
            90% {
                opacity: 1;
            }
            100% {
                transform: translateY(-100px) translateX(100px) rotate(360deg);
                opacity: 0;
            }
        }
       
        @keyframes gridMove {
            0% { transform: translate(0, 0); }
            100% { transform: translate(50px, 50px); }
        }
       
        @keyframes colorShift {
            0%, 100% {
                filter: hue-rotate(0deg) brightness(1) contrast(1.2);
            }
            25% {
                filter: hue-rotate(15deg) brightness(1.2) contrast(1.3);
            }
            50% {
                filter: hue-rotate(-15deg) brightness(1.3) contrast(1.4);
            }
            75% {
                filter: hue-rotate(10deg) brightness(1.4) contrast(1.5);
            }
        }
       
        @keyframes hologramFlicker {
            0%, 100% { opacity: 1; }
            98% { opacity: 1; }
            99% { opacity: 1; }
            99.5% { opacity: 1; }
        }
       
        @keyframes scanlines {
            0% { transform: translateY(0); }
            100% { transform: translateY(4px); }
        }
       
        @keyframes dataFlow {
            0% {
                transform: translateY(-100px);
                opacity: 0;
            }
            10% { opacity: 1; }
            90% { opacity: 1; }
            100% {
                transform: translateY(100vh);
                opacity: 0;
            }
        }
       
        @keyframes boardFloat {
            0%, 100% {
                transform: translateY(0px) rotateX(0deg);
            }
            50% {
                transform: translateY(-5px) rotateX(1deg);
            }
        }
       
        @keyframes holoBorder {
            0% { background-position: 0% 50%, 0% 0%; }
            50% { background-position: 50% 50%, 50% 0%; }
            100% { background-position: 0% 50%, 0% 0%; }
        }
       
        @keyframes titleGlow {
            0%, 100% {
                filter: drop-shadow(0 0 20px rgba(0, 255, 255, 0.5));
            }
            50% {
                filter: drop-shadow(0 0 40px rgba(0, 255, 255, 0.8)) drop-shadow(0 0 60px rgba(255, 0, 64, 0.3));
            }
        }
       
        @keyframes titleShadow {
            0%, 100% {
                transform: translate(2px, 2px);
                opacity: 0.3;
            }
            50% {
                transform: translate(4px, 4px);
                opacity: 0.5;
            }
        }
       
        @keyframes lightning {
            0% {
                opacity: 0;
                transform: scaleY(0);
            }
            10% {
                opacity: 1;
                transform: scaleY(1);
            }
            20% {
                opacity: 0.8;
                transform: scaleY(0.8);
            }
            30% {
                opacity: 1;
                transform: scaleY(1);
            }
            100% {
                opacity: 0;
                transform: scaleY(0);
            }
        }
       
        @keyframes particleGlow {
            0% {
                transform: scale(1);
                filter: brightness(1);
            }
            100% {
                transform: scale(1.3);
                filter: brightness(1.5);
            }
        }
       
        .cyber-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }
       
        .cyber-btn:hover::before {
            left: 100%;
        }
    </style>
</head>
<body class="min-h-screen flex items-center justify-center p-4">
    <!-- Hologram Overlay -->
    <div class="hologram-overlay"></div>
   
    <!-- Data Streams -->
    <div class="data-streams" id="dataStreams"></div>
   
    <!-- Floating Particles -->
    <div class="floating-particles" id="particles"></div>
   
    <!-- Lightning Effects -->
    <div class="lightning-container" id="lightning"></div>
   
    <div class="tournament-board max-w-lg w-full relative">
        <!-- Header -->
        <h1 class="title"> LEADERBOARD</h1>
       
        <!-- VS Divider -->
        <div class="vs-divider">VS</div>
       
        <!-- Players Grid -->
        <div class="grid grid-cols-2 gap-4 relative">
            <!-- JIJY -->
            <div class="player-section">
                <h2 class="player-name red-player">JIJY</h2>
               
                <div class="score-container">
                    <!-- Wins -->
                    <div class="score-box red-score">
                        <div class="score-number" id="jijy-wins">0</div>
                        <button onclick="changeScore('jijy', 'wins', 1)" class="cyber-btn win-btn">
                            WIN
                        </button>
                    </div>

                    <!-- Losses -->
                    <div class="score-box red-score">
                        <div class="score-number" id="jijy-losses">0</div>
                        <button onclick="changeScore('jijy', 'losses', 1)" class="cyber-btn lose-btn">
                            LOSE
                        </button>
                    </div>
                </div>
            </div>

            <!-- MAYKI -->
            <div class="player-section">
                <h2 class="player-name blue-player">MAYKI</h2>
               
                <div class="score-container">
                    <!-- Wins -->
                    <div class="score-box blue-score">
                        <div class="score-number" id="mayki-wins">0</div>
                        <button onclick="changeScore('mayki', 'wins', 1)" class="cyber-btn win-btn">
                            WIN
                        </button>
                    </div>

                    <!-- Losses -->
                    <div class="score-box blue-score">
                        <div class="score-number" id="mayki-losses">0</div>
                        <button onclick="changeScore('mayki', 'losses', 1)" class="cyber-btn lose-btn">
                            LOSE
                        </button>
                    </div>
                </div>
            </div>
        </div>
       
        <!-- Reset Button -->
        <div class="text-center">
            <button onclick="resetScores()" class="cyber-btn reset-btn">
                Score
            </button>
        </div>
    </div>

       

    <script>
        // Player data
        let scores = {
            jijy: { wins: 0, losses: 0 },
            mayki: { wins: 0, losses: 0 }
        };

        // Load scores
        function loadScores() {
            const saved = localStorage.getItem('leaderboard');
            if (saved) {
                scores = JSON.parse(saved);
                updateDisplay();
            }
        }

        // Save scores
        function saveScores() {
            localStorage.setItem('leaderboard', JSON.stringify(scores));
        }

        // Change score with enhanced effects
        function changeScore(player, type, change) {
            scores[player][type] = Math.max(0, scores[player][type] + change);
           
            // Enhanced visual effects
            enhancedScoreEffect(player, type);
           
            updateDisplay();
            saveScores();
        }

        // Update display
        function updateDisplay() {
            document.getElementById('jijy-wins').textContent = scores.jijy.wins;
            document.getElementById('jijy-losses').textContent = scores.jijy.losses;
            document.getElementById('mayki-wins').textContent = scores.mayki.wins;
            document.getElementById('mayki-losses').textContent = scores.mayki.losses;
        }

        // Reset scores
        function resetScores() {
            scores = {
                jijy: { wins: 0, losses: 0 },
                mayki: { wins: 0, losses: 0 }
            };
            updateDisplay();
            saveScores();
           
            // Reset effect
            document.querySelectorAll('.score-number').forEach(el => {
                el.style.animation = 'none';
                setTimeout(() => el.style.animation = '', 100);
            });
        }

        // Create floating particles
        function createParticles() {
            const particleContainer = document.getElementById('particles');
           
            function addParticle() {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = Math.random() * 100 + 'vw';
                particle.style.animationDelay = Math.random() * 2 + 's';
                particle.style.animationDuration = (8 + Math.random() * 8) + 's';
               
                particleContainer.appendChild(particle);
               
                // Remove particle after animation
                setTimeout(() => {
                    if (particle.parentNode) {
                        particle.parentNode.removeChild(particle);
                    }
                }, 16000);
            }
           
            // Create initial particles
            for (let i = 0; i < 25; i++) {
                setTimeout(addParticle, i * 150);
            }
           
            // Continue creating particles
            setInterval(addParticle, 600);
        }
       
        // Create data streams
        function createDataStreams() {
            const streamContainer = document.getElementById('dataStreams');
           
            function addDataStream() {
                const stream = document.createElement('div');
                stream.className = 'data-stream';
                stream.style.left = Math.random() * 100 + 'vw';
                stream.style.animationDelay = Math.random() * 2 + 's';
                stream.style.animationDuration = (2 + Math.random() * 4) + 's';
               
                // Random colors for streams
                const colors = ['#00ffff', '#ff0040', '#0080ff', '#00ff88'];
                const color = colors[Math.floor(Math.random() * colors.length)];
                stream.style.background = `linear-gradient(to bottom, transparent, ${color}, transparent)`;
                stream.style.boxShadow = `0 0 10px ${color}`;
               
                streamContainer.appendChild(stream);
               
                setTimeout(() => {
                    if (stream.parentNode) {
                        stream.parentNode.removeChild(stream);
                    }
                }, 6000);
            }
           
            // Create initial streams
            for (let i = 0; i < 8; i++) {
                setTimeout(addDataStream, i * 300);
            }
           
            setInterval(addDataStream, 800);
        }
       
        // Create lightning effects
        function createLightning() {
            const lightningContainer = document.getElementById('lightning');
           
            function addLightning() {
                const lightning = document.createElement('div');
                lightning.className = 'lightning ' + (Math.random() > 0.5 ? 'red' : 'blue');
                lightning.style.left = Math.random() * 100 + 'vw';
                lightning.style.top = Math.random() * 50 + 'vh';
                lightning.style.height = (100 + Math.random() * 200) + 'px';
                lightning.style.transform = 'rotate(' + (Math.random() * 30 - 15) + 'deg)';
               
                lightningContainer.appendChild(lightning);
               
                // Remove lightning after animation
                setTimeout(() => {
                    if (lightning.parentNode) {
                        lightning.parentNode.removeChild(lightning);
                    }
                }, 300);
            }
           
            // Create random lightning
            setInterval(() => {
                if (Math.random() > 0.7) {
                    addLightning();
                    // Sometimes create multiple bolts
                    if (Math.random() > 0.8) {
                        setTimeout(addLightning, 10);
                    }
                }
            }, 1000);
        }
       
        // Enhanced score change with screen shake and lightning
        function enhancedScoreEffect(player, type) {
            const element = document.getElementById(`${player}-${type}`);
            const board = document.querySelector('.tournament-board');
            const lightningContainer = document.getElementById('lightning');
           
            // Score number effect
            element.style.transform = 'scale(1.4)';
            element.style.textShadow = '0 0 40px currentColor, 0 0 60px currentColor';
            element.style.transition = 'all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55)';
           
            // Screen shake effect
            board.style.animation = 'none';
            board.style.transform = 'translateX(5px)';
            setTimeout(() => board.style.transform = 'translateX(-5px)', 50);
            setTimeout(() => board.style.transform = 'translateX(3px)', 100);
            setTimeout(() => board.style.transform = 'translateX(-3px)', 150);
            setTimeout(() => board.style.transform = 'translateX(0)', 200);
           
            // Lightning burst effect
            const playerColor = player === 'jijy' ? 'red' : 'blue';
            for (let i = 0; i < 3; i++) {
                setTimeout(() => {
                    const lightning = document.createElement('div');
                    lightning.className = 'lightning ' + playerColor;
                    lightning.style.left = (30 + Math.random() * 40) + '%';
                    lightning.style.top = (20 + Math.random() * 60) + '%';
                    lightning.style.height = (150 + Math.random() * 100) + 'px';
                    lightning.style.transform = 'rotate(' + (Math.random() * 60 - 30) + 'deg)';
                   
                    lightningContainer.appendChild(lightning);
                   
                    setTimeout(() => {
                        if (lightning.parentNode) {
                            lightning.parentNode.removeChild(lightning);
                        }
                    }, 300);
                }, i * 100);
            }
           
            setTimeout(() => {
                element.style.transform = 'scale(1)';
                element.style.textShadow = '0 0 15px currentColor';
            }, 500);
        }
       
        // Initialize on load
        loadScores();
        createParticles();
        createDataStreams();
        createLightning();
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'976cbd1913c4853b',t:'MTc1NjQ3Nzc0Ni4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>




